!function(){"use strict";const e=()=>window.localStorage.getItem("MOCK_LIST"),t=async e=>{let{func:t=(()=>{}),args:o=[],callback:r=(()=>{})}=e;const[s]=await chrome.tabs.query({active:!0,currentWindow:!0});chrome.scripting.executeScript({target:{tabId:s.id},function:t,args:o},r)},o={},r={};o.getHistoryMOCK_LIST=e,o.setNewMockRecord=e=>{window.localStorage.setItem("MOCK_LIST",e)},o.registerWindowEvent=(e,t)=>{window.addEventListener(e,t)},o.insertFunc=t,o.sendMessage=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:()=>{};chrome.runtime.sendMessage(e,t)},r.insertFunc=t,r.getHistoryMOCK_LIST=e,console.log("welcome");const s={SET_PROXY_URL:e=>{chrome.storage.sync.set({proxy_url:e},(function(){console.log("Value is set to "+e)}))},ENABLE_PROXY:e=>{const{mockList:t}=e,o=t.map(((e,t)=>t+1)),r=t.map(((e,t)=>{const{urlFilter:o,targetUrl:r,id:s}=e;return{id:t+1,priority:1,condition:{urlFilter:o,resourceTypes:["xmlhttprequest","script"]},action:{type:"redirect",redirect:{url:r}}}}));console.log("addRules=>>",o,r);const s={removeRuleIds:o,addRules:r};chrome.declarativeNetRequest.updateDynamicRules(s,(()=>{chrome.declarativeNetRequest.getDynamicRules((e=>console.log("enabler rules",e)))}))},REMOVE_RULE:e=>{const{id:t}=e,o={removeRuleIds:[t]};chrome.declarativeNetRequest.updateDynamicRules(o),console.log("remove rule",t)}};chrome.runtime.onMessage.addListener((async(e,t,o)=>{console.log("BG get==>",e);const{type:c,data:n}=e;if("GET_INIT_DATA"===c){r.insertFunc({func:r.getHistoryMOCK_LIST,callback:e=>{o(e[0].result),console.log("in store",e[0].result)}});const e=await chrome.storage.sync.get("mockList");console.log("storage",e)}else s[c]&&s[c](n);return!0})),chrome.declarativeNetRequest.onRuleMatchedDebug.addListener((e=>console.log("rule match",e))),chrome.storage.onChanged.addListener(((e,t)=>{for(var o in e){var r=e[o];console.log(o,t,r.oldValue,r.newValue)}}))}();
//# sourceMappingURL=service_worker.js.map