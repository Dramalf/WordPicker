{"version":3,"file":"js/service_worker.js","mappings":"yBAAA,MAAMA,EAAsB,IACPC,OAAOC,aAAaC,QAAQ,aAS3CC,EAAaC,UAAiD,IAA1C,KAACC,EAAK,SAAN,KAAaC,EAAK,GAAlB,SAAqBC,EAAS,UAAY,EAChE,MAAOC,SAAaC,OAAOC,KAAKC,MAAM,CAAEC,QAAQ,EAAMC,eAAe,IACrEJ,OAAOK,UAAUC,cAAc,CAC3BC,OAAQ,CAAEC,MAAOT,EAAIU,IACrBC,SAAUd,EACVC,KAAMA,GACRC,EAJF,EASSa,EAAY,CAAC,EACbC,EAAmB,CAAC,EACjCD,EAAS,oBAA0BrB,EACnCqB,EAAS,iBApBiBE,IACtBtB,OAAOC,aAAasB,QAAQ,YAAaD,EAAzC,EAoBJF,EAAS,oBAlBmB,CAACI,EAAWjB,KACpCP,OAAOyB,iBAAiBD,EAAWjB,EAAnC,EAkBJa,EAAS,WAAejB,EACxBiB,EAAS,YATS,SAACM,GAAsB,IAAlBnB,EAAkB,uDAAT,OAC5BE,OAAOkB,QAAQC,YAAYF,EAAInB,EAClC,EAQDc,EAAgB,WAAelB,EAC/BkB,EAAgB,oBAA0BtB,EC3B1C8B,QAAQC,IAAI,WACZ,MAAMC,EAAO,CACT,cAAkBC,IACdvB,OAAOwB,QAAQC,KAAKC,IAAI,CAAE,UAAaH,IAAK,WACxCH,QAAQC,IAAI,mBAAqBE,EACpC,GAFD,EAMJ,aAAiBI,IACb,MAAM,SAAEC,GAAaD,EACfE,EAAgBD,EAASE,KAAI,CAACC,EAAGC,IAAUA,EAAQ,IACnDC,EAAWL,EAASE,KAAI,CAACC,EAAGC,KAC9B,MAAM,UAAEE,EAAF,UAAaC,EAAb,GAAwB1B,GAAOsB,EACrC,MAAO,CACHtB,GAAIuB,EAAQ,EACZI,SAAU,EACVC,UAAW,CACPH,YACAI,cAAe,CAAC,iBAAkB,WAEtCC,OAAQ,CACJC,KAAM,WACNC,SAAU,CAAEC,IAAKP,IATzB,IAaJf,QAAQC,IAAI,cAAeQ,EAAeI,GAC1C,MAAMU,EAAQ,CACVd,gBACAI,YAEJjC,OAAO4C,sBAAsBC,mBAAmBF,GAAO,KACnD3C,OAAO4C,sBAAsBE,iBAAgBH,GAASvB,QAAQC,IAAI,gBAAiBsB,IAAnF,GADJ,EAKJ,YAAgBhB,IACZ,MAAM,GAAElB,GAAOkB,EAETgB,EAAQ,CACVd,cAFkB,CAACpB,IAIvBT,OAAO4C,sBAAsBC,mBAAmBF,GAChDvB,QAAQC,IAAI,cAAcZ,EAA1B,GAGRT,OAAOkB,QAAQ6B,UAAUC,aAAYrD,MAAOsB,EAAKgC,EAAQC,KACrD9B,QAAQC,IAAI,YAAaJ,GACzB,MAAM,KAAEuB,EAAF,KAAQb,GAASV,EACvB,GAAa,kBAATuB,EAA0B,CAE1B5B,EAAiBlB,WAAW,CACxBE,KAAMgB,EAAiBtB,oBACvBQ,SAAW0B,IACP0B,EAAa1B,EAAQ,GAAG2B,QACxB/B,QAAQC,IAAI,WAAYG,EAAQ,GAAG2B,OAAnC,IAGR,MAAMC,QAASpD,OAAOwB,QAAQC,KAAK4B,IAAI,YACvCjC,QAAQC,IAAI,UAAU+B,EACzB,MACG9B,EAAKkB,IAASlB,EAAKkB,GAAMb,GAI7B,OAAO,CAAP,IAEJ3B,OAAO4C,sBAAsBU,mBAAmBN,aAC3CO,GAAMnC,QAAQC,IAAI,aAAckC,KAGrCvD,OAAOwB,QAAQgC,UAAUR,aAAY,CAACS,EAAQC,KAC1C,IAAK,IAAIC,KAAOF,EAAS,CACrB,IAAIG,EAAgBH,EAAQE,GAC5BvC,QAAQC,IACIsC,EACAD,EACAE,EAAcC,SACdD,EAAcE,SAC3B,I","sources":["webpack://react-cli/./src/util/index.js","webpack://react-cli/./src/service_worker/index.jsx"],"sourcesContent":["const getHistoryMOCK_LIST = () => {\n    const mockList = window.localStorage.getItem('MOCK_LIST')\n    return mockList\n}\nconst setNewMockRecord = (l) => {\n    window.localStorage.setItem('MOCK_LIST', l)\n}\nconst registerWindowEvent = (eventName, callback) => {\n    window.addEventListener(eventName, callback);\n}\nconst insertFunc = async ({func=()=>{},args=[],callback=()=>{}}) => {\n    const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });\n    chrome.scripting.executeScript({\n        target: { tabId: tab.id },\n        function: func,\n        args: args\n    },callback);\n}\nconst sendMessage=(msg,callback=()=>{})=>{\n    chrome.runtime.sendMessage(msg,callback);\n}\nexport const popupUtil = {}\nexport const serviceWokerUtil = {}\npopupUtil['getHistoryMOCK_LIST'] = getHistoryMOCK_LIST\npopupUtil['setNewMockRecord'] = setNewMockRecord\npopupUtil['registerWindowEvent'] = registerWindowEvent\npopupUtil['insertFunc']=insertFunc\npopupUtil['sendMessage']=sendMessage\nserviceWokerUtil['insertFunc']=insertFunc\nserviceWokerUtil['getHistoryMOCK_LIST'] = getHistoryMOCK_LIST","/* eslint-disable no-undef */\nimport { serviceWokerUtil } from '../util'\nconsole.log('welcome')\nconst core = {\n    \"SET_PROXY_URL\": (v) => {\n        chrome.storage.sync.set({ 'proxy_url': v }, function () {\n            console.log('Value is set to ' + v);\n        });\n    },\n\n\n    \"ENABLE_PROXY\": (data) => {\n        const { mockList } = data;\n        const removeRuleIds = mockList.map((m, index) => index + 1);\n        const addRules = mockList.map((m, index) => {\n            const { urlFilter, targetUrl, id } = m;\n            return {\n                id: index + 1,\n                priority: 1,\n                condition: {\n                    urlFilter,\n                    resourceTypes: [\"xmlhttprequest\", \"script\"],\n                },\n                action: {\n                    type: \"redirect\",\n                    redirect: { url: targetUrl }\n                }\n            }\n        })\n        console.log('addRules=>>', removeRuleIds, addRules)\n        const rules = {\n            removeRuleIds,\n            addRules\n        };\n        chrome.declarativeNetRequest.updateDynamicRules(rules, () => {\n            chrome.declarativeNetRequest.getDynamicRules(rules => console.log(\"enabler rules\", rules))\n        }\n        )\n    },\n    \"REMOVE_RULE\": (data) => {\n        const { id } = data;\n        const removeRuleIds = [id];\n        const rules = {\n            removeRuleIds\n        };\n        chrome.declarativeNetRequest.updateDynamicRules(rules)\n        console.log('remove rule',id);\n    }\n}\nchrome.runtime.onMessage.addListener(async (msg, sender, sendResponse) => {\n    console.log('BG get==>', msg)\n    const { type, data } = msg\n    if (type === 'GET_INIT_DATA') {\n       \n        serviceWokerUtil.insertFunc({\n            func: serviceWokerUtil.getHistoryMOCK_LIST,\n            callback: (storage) => {\n                sendResponse(storage[0].result)\n                console.log('in store', storage[0].result)\n            }\n        })\n        const r= await chrome.storage.sync.get('mockList')\n        console.log('storage',r)\n    } else {\n        core[type] && core[type](data)\n    }\n    // const { type, data } = msg;\n    // core[type]&&core[type](data);\n    return true;\n})\nchrome.declarativeNetRequest.onRuleMatchedDebug.addListener(\n    (e) => console.log('rule match', e)\n);\n\nchrome.storage.onChanged.addListener((changes,namespace)=>{\n    for (var key in changes) {\n        var storageChange = changes[key];\n        console.log(\n                    key,\n                    namespace,\n                    storageChange.oldValue,\n                    storageChange.newValue);\n      }\n\n})\n\n"],"names":["getHistoryMOCK_LIST","window","localStorage","getItem","insertFunc","async","func","args","callback","tab","chrome","tabs","query","active","currentWindow","scripting","executeScript","target","tabId","id","function","popupUtil","serviceWokerUtil","l","setItem","eventName","addEventListener","msg","runtime","sendMessage","console","log","core","v","storage","sync","set","data","mockList","removeRuleIds","map","m","index","addRules","urlFilter","targetUrl","priority","condition","resourceTypes","action","type","redirect","url","rules","declarativeNetRequest","updateDynamicRules","getDynamicRules","onMessage","addListener","sender","sendResponse","result","r","get","onRuleMatchedDebug","e","onChanged","changes","namespace","key","storageChange","oldValue","newValue"],"sourceRoot":""}